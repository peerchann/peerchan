div(class=catalogMode ? 'post_catalog' : (item.replyto ? 'post_reply' : 'post'), id=item.hash, board=currentBoard)
  div.post-header
    if item.subject
      span.subject #{item.subject}
    if item.email
      a(href=`mailto:${item.email}`, class="namewithlink") #{item.name ? item.name : defaultName}
    else
      span.name #{item.name ? item.name : defaultName}
    span.date #{new Date(parseInt(item.date)).toLocaleString()}
    if indexMode
      a(href=`/${item.board}/thread/${item.replyto || item.hash}.html?reply=${item.hash}#${item.hash}`, class='post-hash', hash=item.hash) #{'#'+item.hash.slice(0, cfg.postHashLength)}
    else
      span.post-hash(class="post-hash-clickable", hash=item.hash) #{'#'+item.hash.slice(0, cfg.postHashLength)}
    if indexMode && !item.replyto
      span.reply-link
        a(href=`/${item.board}/thread/${item.hash}.html`) [Reply]
  if item.files && item.files.length > 0
    if catalogMode
      - cfg.maxFilesPerPostToShow = 1 
    div.embedded-files
      each file in item.files.slice(0, cfg.maxFilesPerPostToShow)
        include embeddedfile.pug
      if item.files.length > cfg.maxFilesPerPostToShow
        div.embedded-file
          p.embedded-info +#{item.files.length - cfg.maxFilesPerPostToShow} file#{item.files.length - cfg.maxFilesPerPostToShow > 1 ? 's' : ''} not shown.
  else
    div.embedded-nothing

  mixin renderSection(sectionContent, sectionType)
    - const hyperlinkRegex = new RegExp('\\b(?:' + cfg.hyperlinkSchemes.map(scheme => scheme.replace(/[.*+\-?^${}()|[\]\\]/g, '\\$&')).join('|') + ')\\S+\\b', 'gi');
    p(class=sectionType)
      each part, index in sectionContent.split(/(?:>>([0-9a-fA-F]{64}))/)
        if part.match(/^([0-9a-fA-F]{64})/)
          if postsOnPage.includes(part)
            a.post-quote(href = '#'+part, hash = part) #{'>>'+part.slice(0,cfg.postHashLength)}
          else
            a.post-quote(href = `/function/findThreadContainingPost/${item.board}/${part}#${part}`, hash = part) #{'>>'+part.slice(0,cfg.postHashLength)}
        else
          - const inMessageQuote = index == 0 && sectionType == 'message-quote'
          if inMessageQuote
            - part = part.slice(1)
          - var currentWords = inMessageQuote ? '>' : ''
          each word, wordIndex in part.split(/(\s+)/)
            if cfg.hyperlinkSchemes.some(scheme => word.startsWith(scheme))
              if currentWords
                span(class=sectionType) #{currentWords}
                - currentWords = ''
              a(href=word) #{word}
            else
              - currentWords += word
          if currentWords
            span(class=sectionType) #{currentWords}

  if item.message
    - var currentSection = ''
    each line in item.message.split('\r\n')
      // if the line starts with > but not a post quote
      if line.startsWith('>') && !line.match(/^>>([0-9a-fA-F]{64})/)
        // if we were not in a message section, we don't need to make a new section
        if pType != 'message'
          - currentSection += line + '\n'
          - pType = 'message-quote'
        else
          // if we are changing from a message section to a message-quote section, we need to render the previous section as a message and start a new message-quote section
          + renderSection(currentSection.trim(), pType)
          - pType = 'message-quote'
          - currentSection = line + '\n'
      else
        // if we were not in a message-quote section, we don't need to make a new section
        if pType != 'message-quote'
          - currentSection += line + '\n'
          - pType = 'message'
        else
          // if we are changing from a message quote section to a message section, we need to render the previous section as a message-quote and start a new message section
          + renderSection(currentSection.trim(), pType)
          - pType = 'message'
          - currentSection = line + '\n'
    // finally, we render the remaining section
    + renderSection(currentSection.trim(), pType)
