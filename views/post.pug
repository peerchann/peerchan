div(class=item.replyto ? 'post_reply' : 'post', id=item.hash, board=currentBoard)
  div.post-header
    if item.subject
      span.subject #{item.subject}
    if item.email
      a(href=`mailto:${item.email}`, class="namewithlink") #{item.name ? item.name : defaultName}
    else
      span.name #{item.name ? item.name : defaultName}
    span.date #{new Date(parseInt(item.date)).toLocaleString()}
    if indexMode
      a(href=`/${item.board}/thread/${item.replyto || item.hash}.html?reply=${item.hash}#${item.hash}`, class='post-hash', hash=item.hash) #{'#'+item.hash.slice(0, cfg.postHashLength)}
    else
      span.post-hash(class="post-hash-clickable", hash=item.hash) #{'#'+item.hash.slice(0, cfg.postHashLength)}
    if indexMode && !item.replyto
      span.reply-link
        a(href=`/${item.board}/thread/${item.hash}.html`) [Reply]
  if item.files && item.files.length > 0
    div.embedded-files
      each file in item.files.slice(0, cfg.maxFilesPerPostToShow)
        include embeddedfile.pug
      if item.files.length > cfg.maxFilesPerPostToShow
        div.embedded-file
          p.embedded-info +#{item.files.length - cfg.maxFilesPerPostToShow} file#{item.files.length - cfg.maxFilesPerPostToShow > 1 ? 's' : ''} not shown.

  else
    div.embedded-nothing
  if item.message
    each line in item.message.split('\n')
      - const hexQuoteMatch = line.match(/^>>([0-9a-fA-F]{64})/)
      - const quoteMatch = line.match(/^>/) !== null
      - const splitIntoSpaces = quoteMatch ? line.slice(1).split(/(\s+)/) : line.split(/(\s+)/)
      if hexQuoteMatch
        - const hashRef = hexQuoteMatch[0].slice(2)
        p.message
          if postsOnPage.includes(hashRef)
            a.post-quote(href = '#'+hashRef, hash = hashRef) #{hexQuoteMatch[0].slice(0,cfg.postHashLength+2)}
          else
            a.post-quote(href = `/function/findThreadContainingPost/${item.board}/${hashRef}#${hashRef}`, hash = hashRef) #{hexQuoteMatch[0].slice(0,cfg.postHashLength+2)}
          span.message #{line.substring(hexQuoteMatch[0].length)}
      else
        p.message
          - let index = 0
          -let messageLineClass = quoteMatch ? 'message-quote' : 'message'
          span(class=messageLineClass) #{quoteMatch ? '>' : ''}
          each word in splitIntoSpaces
            - index++
            if cfg.hyperlinkSchemes.some(scheme => word.startsWith(scheme))
              a(href=word) #{word}
            else
              span(class=messageLineClass) #{word}


