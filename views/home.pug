doctype html
html
  head
    title
    link(rel="stylesheet", href=`/${cssTheme}.css`)
    script.
      let deleteMode = '';

      function generateRandomPost() {
        fetch('/generateRandomPost', {
          method: 'POST'
        })
        .then(response => {
          if (!response.ok) {
            throw new Error('Network response was not ok');
          }
          return response.text();
        })
        .then(data => {
          console.log(data);
          // Handle response if needed
        })
        .catch(error => {
          console.error('There was a problem with your fetch operation:', error);
        });
      }

      function deleteAllPosts() {
        fetch('/deleteAllPosts', {
          method: 'POST'
        })
        .then(response => {
          if (!response.ok) {
            throw new Error('Network response was not ok');
          }
          return response.text();
        })
        .then(data => {
          console.log(data);
          // Handle response if needed
        })
        .catch(error => {
          console.error('There was a problem with your fetch operation:', error);
        });
      }

      function deletePost() {
        deleteMode = deleteMode !== 'post' ? 'post' : '';
        document.documentElement.style.cursor = deleteMode ? 'crosshair' : 'default';

        // Toggle the 'deletion-mode' class on post elements
        const posts = document.querySelectorAll('.post, .post_reply');
        posts.forEach(post => {
            post.classList.toggle('deletion-mode', deleteMode === 'post');
        });

        // Attach click event listener to document body to exit deletion mode on next click
        if (deleteMode) {
          document.documentElement.addEventListener('click', exitDeletionModeOnce);
        }
      }

      function deleteFile() {
        deleteMode = deleteMode !== 'file' ? 'file' : '';
        document.documentElement.style.cursor = deleteMode ? 'crosshair' : 'default';

        // Toggle the 'deletion-mode' class on embedded file elements
        const embeddedFiles = document.querySelectorAll('.embedded-file');
        embeddedFiles.forEach(file => {
          file.classList.toggle('deletion-mode', deleteMode === 'file');
        });

        // Attach click event listener to document body to exit deletion mode on next click
        if (deleteMode) {
          document.documentElement.addEventListener('click', exitDeletionModeOnce);
        }
      }

      function exitDeletionModeOnce(event) {
        // Prevent immediate exiting if clicking the delete image button
        if (event.target.tagName !== 'BUTTON') {
          deleteMode = '';
          document.documentElement.style.cursor = 'default';

          // Toggle the 'deletion-mode' class off all embedded file elements
          const embeddedFiles = document.querySelectorAll('.embedded-file');
          embeddedFiles.forEach(file => {
            file.classList.remove('deletion-mode');
          });

          // Toggle the 'deletion-mode' class off all post elements
          const allPosts = document.querySelectorAll('.post, .post_reply');
          allPosts.forEach(post => {
            post.classList.remove('deletion-mode');
          });

          // Remove the click event listener from the document body after a brief delay
          setTimeout(() => {
            document.body.removeEventListener('click', exitDeletionModeOnce);
          }, 100);
        }
      }

      function handleFileClick(hash) {
        if (deleteMode === 'file') {
          window.location.href = `/deletefile=${hash}`;
        }
      }

      function handlePostClick(hash) {
        if (deleteMode === 'post') {
          window.location.href = `/#{currentBoard}/deletepost=${hash}`;
        }
      }

      function changeTheme() {
        const themeSelector = document.getElementById('cssThemeSelector');
        window.location.href = '/function/changeTheme/' + themeSelector.options[themeSelector.selectedIndex].value;
      }

      document.addEventListener("DOMContentLoaded", function() {
        // Add event listener to embedded images
        const embeddedImages = document.querySelectorAll('.embedded-file');
        embeddedImages.forEach(thisOne => {
          thisOne.addEventListener('click', function() {
            const fileHash = thisOne.getAttribute('filehash');
            handleFileClick(fileHash);
          });
        });
        const allPosts = document.querySelectorAll('.post, .post_reply');
        allPosts.forEach(thisOne => {
          thisOne.addEventListener('click', function() {
            const hash = thisOne.getAttribute('hash');
            handlePostClick(hash);
          });
        });
      });

    body
      .wrapper
        .content
          div
            | [ 
            each boardName, index in watchedBoards
              | #{index === 0 ? '' : ' / '}
              a(href=`/${boardName}/index.html`) #{boardName}
            |  ] [ 
            a(href="/home") home
            |  ]
          if alert
            .alert #{alert}
          block content
        .sidebar
          h2 Post Form
          include postform.pug

          h2 Moderation
          button(onclick="deletePost()", class="sidebarbutton") Delete Post
          button(onclick="deleteFile()", class="sidebarbutton") Block File

          h2 Control Panel
          label(for="cssThemeSelector") Theme: 
          select(id="cssThemeSelector", onchange="changeTheme()")
            each theme in themes
              option(value=theme, selected=(theme === cssTheme ? 'selected' : null)) #{theme.charAt(0).toUpperCase() + theme.slice(1)}
          br
          br
          .clientid Client id: #{clientId}
          br
          label(for="myMultiAddrTextbox") My MultiAddr
          input(type="text", id="myMultiAddrTextbox", readonly, value=myMultiAddr)
          form(action="/connectToPeer" method="POST" enctype="multipart/form-data")
            label(for="peerMultiAddr") Peer MultiAddr:
            input(type="text", id="peerMultiAddr", name="peerMultiAddr")
            br
            button(type="connecttopeer", class="sidebarbutton") Connect to Peer MultiAddr